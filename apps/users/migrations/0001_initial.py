# Generated by Django 5.0.4 on 2024-08-29 12:51

import apps.users.helpers
import apps.users.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("membership", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Customer",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=150, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                ("email", models.EmailField(blank=True, max_length=254, verbose_name="email address")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                ("customer_number", models.CharField(max_length=20, unique=True)),
                ("name", models.CharField(max_length=255)),
                ("name2", models.CharField(blank=True, max_length=255, null=True)),
                ("address", models.CharField(max_length=255)),
                ("address2", models.CharField(blank=True, max_length=255, null=True)),
                ("postal_code", models.CharField(max_length=20)),
                ("city", models.CharField(max_length=100)),
                ("contact", models.CharField(blank=True, max_length=255, null=True)),
                ("phone", models.CharField(blank=True, max_length=50, null=True)),
                ("credit_limit", models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ("customer_price_group", models.CharField(blank=True, max_length=50, null=True)),
                ("deb_discount_group", models.CharField(blank=True, max_length=50, null=True)),
                ("invoice_discount_code", models.CharField(blank=True, max_length=50, null=True)),
                ("vat", models.CharField(blank=True, max_length=5, null=True)),
                ("interest_condition_code", models.CharField(blank=True, max_length=50, null=True)),
                ("currency_code", models.CharField(blank=True, max_length=5, null=True)),
                ("language_code", models.CharField(blank=True, max_length=50, null=True)),
                ("country_code", models.CharField(blank=True, max_length=50, null=True)),
                ("quantity_discount_allowed", models.BooleanField(default=False)),
                ("reserved_1", models.CharField(blank=True, max_length=50, null=True)),
                ("reserved_2", models.CharField(blank=True, max_length=50, null=True)),
                ("company_ref", models.CharField(max_length=20)),
                ("reserved_3", models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ("reserved_4", models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ("show_postal_charge", models.BooleanField(default=False)),
                ("price_includes_vat", models.BooleanField(default=False)),
                ("name3", models.CharField(blank=True, max_length=255, null=True)),
                ("name4", models.CharField(blank=True, max_length=255, null=True)),
                ("post_box", models.CharField(blank=True, max_length=255, null=True)),
                ("postal_code_post_box", models.CharField(blank=True, max_length=20, null=True)),
                ("city_post_box", models.CharField(blank=True, max_length=100, null=True)),
                ("contact_salutation", models.CharField(blank=True, max_length=50, null=True)),
                ("contact_title", models.CharField(blank=True, max_length=255, null=True)),
                ("fax", models.CharField(blank=True, max_length=50, null=True)),
                ("advertising", models.BooleanField(default=False)),
                ("occupation", models.CharField(blank=True, max_length=255, null=True)),
                ("vat_reg_number", models.CharField(blank=True, max_length=50, null=True)),
                ("web_shop_id", models.CharField(blank=True, max_length=255, null=True)),
                ("login_name", models.CharField(max_length=255)),
                ("web_shop_password", models.CharField(max_length=255)),
                ("type", models.CharField(choices=[("Person", "Person"), ("Company", "Company")], max_length=50)),
                ("access_member_area", models.BooleanField(default=False)),
                ("access_personal", models.BooleanField(default=False)),
                ("newsletter", models.BooleanField(default=False)),
                ("shop_customer_number", models.CharField(blank=True, max_length=255, null=True)),
                ("active", models.BooleanField(default=True)),
                ("firstname", models.CharField(max_length=255)),
                ("lastname", models.CharField(max_length=255)),
                ("reminder_date", models.DateField(blank=True, null=True)),
                ("expiry_date", models.DateField(blank=True, null=True)),
                ("student_id_url", models.URLField(blank=True, null=True)),
                ("student_id_valid_until", models.DateField(blank=True, null=True)),
                ("student_status", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "avatar",
                    models.FileField(
                        blank=True,
                        upload_to=apps.users.models._get_avatar_filename,
                        validators=[apps.users.helpers.validate_profile_picture],
                    ),
                ),
                ("language", models.CharField(blank=True, max_length=250, null=True)),
                ("timezone", models.CharField(blank=True, default="", max_length=250)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="membership.membership"
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "users_customer",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
